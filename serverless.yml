# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dev-realtime-appsync
frameworkVersion: "2"

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"      
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:GetItem"
            - "dynamodb:Scan"
          Resource: "arn:aws:dynamodb:#{AWS::Region}:*:table/${self:custom.TODO_TABLE}"

custom:
  TODO_TABLE: todo-table

  appSync:
    name: appsync-todo-apis-demo
    authenticationType: AWS_LAMBDA
    lambdaAuthorizerConfig:
      lambdaFunctionArn: arn:aws:lambda:us-east-1:929042302465:function:sgn-feedrank-dev-dev-deleteStories

    # mappingTemplates:
    #   - type: Mutation
    #     field: createTodo
    #     dataSource: createTodoFunction
    #     request: false
    #     response: false
    #   - type: Mutation
    #     field: updateTodo
    #     dataSource: updateTodoFunction
    #     request: false
    #     response: false
    #   - type: Mutation
    #     field: deleteTodo
    #     dataSource: deleteTodoFunction
    #     request: false
    #     response: false
    #   - type: Query
    #     field: getTodos
    #     dataSource: getTodosFunction
    #     request: false
    #     response: false
    # dataSources:
    #   - type: AWS_LAMBDA
    #     name: createTodoFunction
    #     config:
    #       functionName: createTodo

    #   - type: AWS_LAMBDA
    #     name: updateTodoFunction
    #     config:
    #       functionName: updateTodo

    #   - type: AWS_LAMBDA
    #     name: deleteTodoFunction
    #     config:
    #       functionName: deleteTodo

    #   - type: AWS_LAMBDA
    #     name: getTodosFunction
    #     config:
    #       functionName: getTodos

  # AppSyncAuthorizer:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./appsync-authorizer/
  #     Handler: appsync-authorizer.handler
  #     Description: Lambda Authorizer for AppSync
  #     FunctionName: appsync-authorizer

  # LambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt arn:aws:lambda:us-east-1:929042302465:function:dev-realtime-appsync-dev-appSyncAuthorization
  #     Action: lambda:InvokeFunction
  #     Principal: appsync.amazonaws.com
  #     # SourceAccount: !Ref "AWS::AccountId"
  #     # SourceArn: !GetAtt AppSync.Arn

# functions:
#   getTodos:
#     handler: functions/getTodos.handler
#     environment:
#       TODO_TABLE_NAME: !Ref TodoTable

#   appSyncAuthorization:
#     handler: functions/appsync-authorizer.handler


#   createTodo:
#     handler: functions/createTodo.handler
#     environment:
#       TODO_TABLE_NAME: !Ref TodoTable

#   updateTodo:
#     handler: functions/updateTodo.handler
#     environment:
#       TODO_TABLE_NAME: !Ref TodoTable

#   deleteTodo:
#     handler: functions/deleteTodo.handler
#     environment:
#       TODO_TABLE_NAME: !Ref TodoTable

# resources:
#   Resources:
#     TodoTable:
#       Type: "AWS::DynamoDB::Table"
#       Properties:
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         BillingMode: PAY_PER_REQUEST
#         TableName: ${self:custom.TODO_TABLE}
